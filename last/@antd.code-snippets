{
	"@antd_table_check": {
		"prefix": "@antd_table_check",
		"body": [
			"import React, {Component} from 'react';",
			"import {Button, Table} from 'antd';",
			"import { withRouter } from \"react-router-dom\";",
			"",
			"class CheckTable extends Component {",
			"  constructor(props) {",
			"      super(props);",
			"  }",
			"  columnsConfig = () => {",
			"    return [",
			"      {",
			"        title: \"序号\",",
			"        dataIndex: \"index\",",
			"        key: \"index\",",
			"        width: 60,",
			"        render: (text, record, index) => {",
			"          return index + 1;",
			"        }",
			"      },",
			"      {",
			"        title: \"分组名\",",
			"        dataIndex: \"name\",",
			"        key: \"name\",",
			"        width: \"20%\",",
			"        render: text => text",
			"      },",
			"      {",
			"        title: \"配置时间\",",
			"        dataIndex: \"time\",",
			"        key: \"time\",",
			"        width: \"20%\",",
			"        render: text => text",
			"      }",
			"    ];",
			"  };",
			"  renderDataContent = () => {",
			"    const dataList = [{",
			"      name: 'pre',",
			"      time: '2018-02-05  15:28:03 '",
			"    }, {",
			"      name: 'han',",
			"      time: '2018-02-05  15:28:03 ',",
			"    }, {",
			"      name: 'hna-text',",
			"      time: '2018-02-05  15:28:03 ',",
			"    }]",
			"    ",
			"    let tableParams = {",
			"      pagination: false,",
			"      dataSource: dataList,",
			"      columns: this.columnsConfig(),",
			"      rowKey: (record, index) => {",
			"        return index;",
			"      },",
			"      rowSelection: {",
			"        columnWidth: 60,",
			"        onChange: (selectedRowKeys, selectedRows) => {",
			"          console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);",
			"        },",
			"        getCheckboxProps: record => ({",
			"          // disabled: record.name === 'hna-text', // Column configuration not to be checked",
			"          // checked: record.name === 'hna-text',",
			"        }),",
			"      }",
			"    };",
			"    return (",
			"      <Table {...tableParams} />",
			"    )",
			"  }",
			"  render() {",
			"    return (",
			"      <div>",
			"        {this.renderDataContent()}",
			"      </div>",
			"    );",
			"  }",
			"}",
			"export default withRouter(CheckTable);"
		],
		"description": "勾选框table"
	},
	"@antd_table_base": {
		"prefix": "@antd_table_base",
		"body": [
			"import React, { Component } from \"react\";",
			"import { Link, withRouter } from \"react-router-dom\";",
			"import { Button, Icon, Table } from \"antd\";",
			"import { connect } from \"react-redux\";",
			"import pureRender from \"pure-render-decorator\";",
			"import actions from \"difc/action/myServices/serviceState\";",
			"import \"./index.less\";",
			"",
			"@pureRender",
			"class BaseTable extends Component {",
			"  constructor(props) {",
			"    super(props);",
			"    this.state = {};",
			"  }",
			"  componentWillMount() {}",
			"  componentWillReceiveProps(nextProps) {",
			"  }",
			"  columnsConfig = () => {",
			"    return [",
			"      {",
			"        title: \"序号\",",
			"        width: 60,",
			"        key: \"index\",",
			"        render: (text, record, index) => {",
			"          return index + 1;",
			"        }",
			"      },",
			"      {",
			"        title: \"实例\",",
			"        dataIndex: \"name\",",
			"        key: \"name\",",
			"        width: \"20%\",",
			"        render: text => {",
			"          return text;",
			"        }",
			"      },",
			"      {",
			"        title: \"运行状态\",",
			"        dataIndex: \"isOk\",",
			"        key: \"isOk\",",
			"        render: text => {",
			"          let className = text === 1 ? \"circle\" : \"circle stop\";",
			"          return (",
			"            <div>",
			"              <span className={className} />",
			"              {ServiceRunStatus[text]}",
			"            </div>",
			"          );",
			"        }",
			"      },",
			"      {",
			"        title: \"分组名\",",
			"        dataIndex: \"hostname\",",
			"        key: \"hostname\",",
			"        width: \"20%\",",
			"        render: text => {",
			"          return text;",
			"        }",
			"      },",
			"      {",
			"        title: \"运行版本\",",
			"        dataIndex: \"versions\",",
			"        key: \"versions\",",
			"        width: \"20%\",",
			"        render: list => {",
			"          let element = null;",
			"          return list.map((item, index) => {",
			"            return <div key={index}>{item.version}</div>;",
			"          });",
			"        }",
			"      }",
			"    ];",
			"  };",
			"  renderDataContent = () => {",
			"    const dataSource = [{",
			"      name: 'aaa',",
			"      isOk: 1,",
			"      hostname: '127.0.0.1',",
			"      versions: [1,2,3]",
			"    }, {",
			"      isOk: 0,",
			"      hostname: '127.0.0.1',",
			"      versions: [2,3,4]",
			"    }];",
			"    let tableParams = {",
			"      name: 'bbb',",
			"      pagination: false,",
			"      dataSource: dataSource,",
			"      columns: this.columnsConfig(),",
			"      rowKey: (record, index) => {",
			"        return index;",
			"      }",
			"    };",
			"    return (",
			"          <Table className=\"table-style\" {...tableParams} />",
			"    );",
			"  };",
			"",
			"  render() {",
			"    return <div id=\"ServiceState\">{this.renderDataContent()}</div>;",
			"  }",
			"}",
			"export default connect(state => {",
			"  return {",
			"    ...state.myServices,",
			"    ...state.difCommon",
			"  };",
			"}, actions)(withRouter(BaseTable));",
			""
		],
		"description": "基本表格"
	},
	"@antd_table_nest_base": {
		"prefix": "@antd_table_nest_base",
		"body": [
			"import React, {Component} from 'react';",
			"import { Table, Badge, Menu, Dropdown, Icon } from 'antd';",
			"import './index.less';",
			"",
			"class NestedTable extends Component {",
			"  constructor(props){",
			"    super(props);",
			"  }",
			"  columnsNestedConfig = () => {",
			"    return [",
			"      {",
			"        title: \"序号\",",
			"        width: \"15%\",",
			"        key: \"index\",",
			"        render: (text, record, index) => {",
			"          return index + 1;",
			"        }",
			"      },",
			"      {",
			"        title: \"实例名\",",
			"        dataIndex: \"hostname\",",
			"        key: \"hostname\",",
			"        width: \"25%\",",
			"        render: text => {",
			"          return text;",
			"        }",
			"      },",
			"      {",
			"        title: \"是否到达\",",
			"        dataIndex: \"success\",",
			"        width: \"25%\",",
			"        key: \"success\",",
			"        render: text => {",
			"          return text === 0 ? (",
			"            <div>",
			"              <span className=\"circle stop\" />异常",
			"            </div>",
			"          ) : (",
			"            <div>",
			"              <span className=\"circle\" />正常",
			"            </div>",
			"          );",
			"        }",
			"      },",
			"      {",
			"        title: \"上报时间\",",
			"        dataIndex: \"upTime\",",
			"        key: \"upTime\",",
			"        width: \"30%\",",
			"        render: text => {",
			"          return text;",
			"          // return CSTTransfer(text);",
			"        }",
			"      }",
			"    ];",
			"  };",
			"",
			"  renderNestedTable = () => {",
			"    const dataSource = [",
			"      {",
			"        hostname: 'cplat-uranus-api01.gz01',",
			"        success: '是',",
			"        upTime: '2018-02-05  15:28:03 ',",
			"      },",
			"      {",
			"        hostname: 'cplat-uranus-api01.gz01 ',",
			"        success: '否',",
			"        upTime: '2018-02-05  15:28:03 '",
			"      }",
			"    ]",
			"",
			"    let tableParams = {",
			"      pagination: false,",
			"      dataSource: dataSource,",
			"      columns: this.columnsNestedConfig(),",
			"      rowKey: (record, index) => {",
			"        return index;",
			"      }",
			"    };",
			"",
			"    let nextParams = {",
			"      pagination: false,",
			"      dataSource: dataSource,",
			"      columns: this.columnsNestedConfig(),",
			"      rowKey: (record, index) => {",
			"        return index;",
			"      }",
			"    };",
			"    return (",
			"      <Table {...tableParams} />",
			"    );",
			"  }",
			"",
			"  columnsConfig = () => {",
			"    return [",
			"      {",
			"        title: \"序号\",",
			"        dataIndex: \"index\",",
			"        key: \"index\",",
			"        width: 60,",
			"        render: (text, record, index) => {",
			"          return index + 1;",
			"        }",
			"      },",
			"      {",
			"        title: \"分组名\",",
			"        dataIndex: \"name\",",
			"        key: \"name\",",
			"        width: \"20%\",",
			"        render: text => text",
			"      },",
			"      {",
			"        title: \"配置时间\",",
			"        dataIndex: \"time\",",
			"        key: \"time\",",
			"        width: \"20%\",",
			"        render: text => text",
			"      },",
			"      {",
			"        title: \"操作\",",
			"        dataIndex: \"operation\",",
			"        key: \"operation\",",
			"        width: \"20%\",",
			"        render: text => {",
			"          return (",
			"            <a href=\"\" onClick={()=>{}} >部署</a>",
			"          )",
			"        }",
			"      }",
			"    ];",
			"  };",
			"",
			"  renderTable = () => {",
			"    const dataSource = [",
			"      {",
			"        name: 'pre',",
			"        time: '2018-02-05  15:28:03'",
			"      },",
			"      {",
			"        name: 'han',",
			"        time: '2018-02-05  15:28:03'",
			"      }",
			"    ]",
			"",
			"    let tableParams = {",
			"      pagination: false,",
			"      dataSource: dataSource,",
			"      columns: this.columnsConfig(),",
			"      rowKey: (record, index) => {",
			"        return index;",
			"      }",
			"    };",
			"  ",
			"    return (",
			"      <Table",
			"        className=\"components-table-demo-nested\"",
			"        expandedRowRender={this.renderNestedTable}",
			"        {...tableParams}",
			"      />",
			"    );",
			"  }",
			"",
			"  render(){",
			"    return (this.renderTable())",
			"  }",
			"}",
			"",
			"export default NestedTable"
		],
		"description": "基本嵌套表格"
	},
	"@antd_form_base(login)": {
		"prefix": "@antd_form_base(login)",
		"body": [
			"/**1",
			" * 经过 getFieldDecorator 包装的控件，表单控件会自动添加 value（或 valuePropName 指定的其他属性） onChange（或 trigger 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：",
			"你不再需要也不应该用 onChange 来做同步，但还是可以继续监听 onChange 等事件。",
			"你不能用控件的 value defaultValue 等属性来设置表单域的值，默认值可以用 getFieldDecorator 里的 initialValue。",
			"你不应该用 setState，可以使用 this.props.form.setFieldsValue 来动态改变表单值。",
			" * ",
			" * 2",
			" * 充值需要使用resetFields，文档参考http://10.95.156.112:8001/components/form-cn/",
			" */",
			"",
			"import React, {Component} from 'react';",
			"import { Form, Icon, Input, Button, Checkbox } from 'antd';",
			"const FormItem = Form.Item;",
			"",
			"class BaseLoginForm extends Component {",
			"  handleSubmit = (e) => {",
			"    e.preventDefault();",
			"    this.props.form.validateFields((err, values) => {",
			"      if (!err) {",
			"        console.log('Received values of form: ', values);",
			"      }",
			"    });",
			"  }",
			"  render() {",
			"    const { getFieldDecorator } = this.props.form;",
			"    return (",
			"      <Form onSubmit={this.handleSubmit} className=\"login-form\">",
			"        <FormItem>",
			"          {getFieldDecorator('userName', {",
			"            rules: [{ required: true, message: 'Please input your username!' }],",
			"          })(",
			"            <Input prefix={<Icon type=\"user\" style={{ fontSize: 13 }} />} placeholder=\"Username\" />",
			"          )}",
			"        </FormItem>",
			"        <FormItem>",
			"          {getFieldDecorator('password', {",
			"            rules: [{ required: true, message: 'Please input your Password!' }],",
			"          })(",
			"            <Input prefix={<Icon type=\"lock\" style={{ fontSize: 13 }} />} type=\"password\" placeholder=\"Password\" />",
			"          )}",
			"        </FormItem>",
			"        <FormItem>",
			"          {getFieldDecorator('remember', {",
			"            valuePropName: 'checked',",
			"            initialValue: true,",
			"          })(",
			"            <Checkbox>Remember me</Checkbox>",
			"          )}",
			"          <a className=\"login-form-forgot\" href=\"\">Forgot password</a>",
			"          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">",
			"            Log in",
			"          </Button>",
			"          Or <a href=\"\">register now!</a>",
			"        </FormItem>",
			"      </Form>",
			"    );",
			"  }",
			"}",
			"export default Form.create()(BaseLoginForm);",
			""
		],
		"description": "基本form表单(login)"
	},
	"@antd_modal_base": {
		"prefix": "@antd_modal_base",
		"body": [
			"import React, {Component} from 'react';",
			"import { Modal, Button } from 'antd';",
			"",
			"class BaseModal extends Component {",
			"  state = { visible: false }",
			"  showModal = () => {",
			"    this.setState({",
			"      visible: true,",
			"    });",
			"  }",
			"  handleOk = (e) => {",
			"    console.log(e);",
			"    this.setState({",
			"      visible: false,",
			"    });",
			"  }",
			"  handleCancel = (e) => {",
			"    console.log(e);",
			"    this.setState({",
			"      visible: false,",
			"    });",
			"  }",
			"  render() {",
			"    return (",
			"      <div>",
			"        <Button type=\"primary\" onClick={this.showModal}>Open</Button>",
			"        <Modal",
			"          title=\"Basic Modal\"",
			"          visible={this.state.visible}",
			"          onOk={this.handleOk}",
			"          onCancel={this.handleCancel}",
			"        >",
			"          <p>Some contents...</p>",
			"          <p>Some contents...</p>",
			"          <p>Some contents...</p>",
			"        </Modal>",
			"      </div>",
			"    );",
			"  }",
			"}",
			"",
			"export default BaseModal;"
		],
		"description": "基本modal框"
	},
	"@antd_modal_confirm_warn": {
		"prefix": "@antd_modal_confirm_warn",
		"body": [
			"import React, { Component } from \"react\";",
			"import { Button, Icon, Table, Popover, Modal} from \"antd\";",
			"",
			"class ModalWarn extends Component {",
			"  constructor(props) {",
			"    super(props);",
			"  }",
			"",
			"  handleRejected = () => {",
			"    Modal.warning({",
			"      className: 'proxy-confirm',",
			"      title: '您提交的流量配置申请未通过审核',",
			"      content: '原因：巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉',",
			"      okText: '确定'",
			"    });    ",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <div>",
			"        {this.handleRejected()}",
			"      </div>",
			"    )",
			"  }",
			"}",
			"",
			"export default ModalWarn"
		],
		"description": "modal基本确认警告框"
	},
}